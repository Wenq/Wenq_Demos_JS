
/*
 *目前用到的包：
 * webpack
 * babel ...
 * react react-dom
 * webpack-dev-server
 * 
 *目前用到的指令：
 *	npm init //初始化项目
 *	npm install --save ** 
 	//安装包
 *	npm install --save-dev ** 
 	//安装包到开发环境(非生产环境)
 *	npm install ** --save-dev 
 	//'--save-dev'的含义是代表把你的安装包信息写入package.json文件的devDependencies字段中，包安装在指定项目的node_modules文件夹下
 *	npm install --save-dev ** ** ** **
 	//同时安装多个包
 *	npm install --save-dev **@3
 	//安装特定版本包
 *	npm install ** -g
 	//全局安装:包安装在Node安装目录下的node_modules文件夹中，一般在\Users\用户名\AppData\Roaming\ 	目录下,可以使用npm root -g查看全局安装目录
 *	webpack weback.config.dev.js //webpack打包
 *	npm run **
 */

/*
	2018-05-15
	开始动手实践从零开始(跟着网络帖子学习)搭建react项目结构
	学习帖：https://github.com/brickspert/blog/issues/1#
*/

/*
	20180516
	编译命令：
	目标目录：F:\react-family>
	编译指令：.\node_modules\.bin\webpack --config webpack.dev.config.js
/*
	20180517
	优化编译指令：npm run dev-build
*/

/*
	20180519
	全局安装webpack，webpack-dev-server
	安装调试服务器，支持路由
	运行调试服务器指令：webpack-dev-server --config webpack.dev.config.js
	支持局域网使用ip访问
	支持找不到页面即404，自动跳到index.html页面(主页？)
	支持修改了代码，自动编译并刷新网页
*/

/*
	20180520
	模块热替换
	问题：修改了组建代码，整个页面都被刷新，且组建内部state被重置
	react-hot-loader
	[文件路径优化]：为特定的文件路径配置别名，在webpack的配置文件中
*/

/*
	20180521
	[集成redux]:
	[combinReducers优化]:
	[devtool优化]:
*/

/*
	20180522
	[引入库'react-redux']:
	[结合react与redux库使用]:
*/

/*
	20180523
	[debug]
	[异步action]:
	[redux-thunk库]:简单的说，中间件就是action在到达reducer，先经过中间件处理。我们之前知道reducer能处理的action只有这样的{type:xxx}，所以我们使用中间件来处理函数形式的action，把他们转为标准的action给reducer。这是redux-thunk的作用。
	[devtool优化]:webpack.dev.config.js增加devtool: 'inline-source-map'。能打开编写的各个js，能打断点.
*/

/*
	20180524
	[编译css]: npm install css-loader style-loader --save-dev
	引入库: style-loader css-loader
*/

/*
	20180528
	[编译图片]
	[按需加载]
	[缓存]
	[HtmlWebpackPlugin]
	[提取公共代码]
	[生产坏境构建]
	[文件压缩]
	[指定环境]
	[优化缓存]
	[public path]
	[打包优化]
	[抽取css]
*/

/*
	20180529
	实践，手写一遍之前看的章节的代码
	[编译图片]: npm install --save-dev url-loader file-loader
	[按需加载]: npm install bundle-loader --save-dev
*/

/*
	20180607
	实践
	[改造路由器]
	[缓存]
*/

/*
	20180612
	实践
	[缓存]
*/

/*
	20180614
	实践
	[HtmlWebpackPlugin]：npm install html-webpack-plugin --save-dev
	[提取公共代码]
*/

/*
	20180618
	实践

	[生产坏境构建]

	[文件压缩]: npm i --save-dev uglifyjs-webpack-plugin

	[指定环境]: new webpack.DefinePlugin({
          'process.env': {
              'NODE_ENV': JSON.stringify('production')
           }
       })

	[优化缓存]:	new webpack.HashedModuleIdsPlugin()
				new webpack.optimize.CommonsChunkPlugin({
			    name: 'runtime'
				})

	[public path]:	静态文件放在了单独的静态服务器上,
					output: {
				        publicPath : '/'
				    }

    [打包优化]:	npm install clean-webpack-plugin --save-dev   //清理掉打包目录旧(所有)文件

    [抽取css]:	目前我们的css是直接打包进js里面的，我们希望能单独生成css文件. 
    			npm install --save-dev extract-text-webpack-plugin

	[使用axios和middleware优化API请求]:	npm install --save axios

	[调整文本编辑器]:	使用自动编译代码时，可能会在保存文件时遇到一些问题。某些编辑器具有“安全写入”功能，可能会影响重新编译。要在一些常见的编辑器中禁用此功能
	:Sublime Text 3 / IntelliJ / Vim / WebStorm

	[合并提取webpack公共配置]: npm install --save-dev webpack-merge

	[优化目录结构并增加404页面]: 分离组建，增加NotFound组件，修改路由
*/

/*
	20180619
	[加入 babel-plugin-transform-runtime 和 babel-polyfill]:
	npm install --save-dev babel-plugin-transform-runtime;npm install --save-dev babel-polyfill.
	
	babel 提供了 transform-runtime 来将这些辅助函数“搬”到一个单独的模块 babel-runtime 中，这样做能减小项目文件的大小。

	[集成PostCSS]: npm install --save-dev  postcss-loader; npm install --save-dev  postcss-cssnext
	postCSS的功能很多，插件很多，这里用到了 autoprefixer自动加前缀
*/

/*
	20180620
	[redux 模块热替换配置]: 修改store.js中代码实现
	[模拟AJAX数据之Mock.js]:npm install mockjs --save-dev
*/

/*
	20180621
	继续[模拟AJAX数据之Mock.js]: 定义了mock，在index.js引入。 mock的工作就是，拦截AJAX请求，返回模拟数据。
*/

/*
	20180624
	[使用 CSS Modules]: 使得css样式文件中的单个样式，可以以模块化方式去访问，比如'styles.样式名称'.
*/

/*
	20180625
	[使用 json-server 代替 Mock.js]: npm install --save-dev json-server
	json-server和Mock.js一样，都是用来模拟接口数据的。json-server功能更强大，支持分页，排序，筛选等等

	[问题修复]: 1. react热模块加载无效
*/